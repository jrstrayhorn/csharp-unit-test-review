Code w/ Mosh - Unit Testing for C# Developers
=================================================

Benefits of Unit Tests
	Code Documentation!!
	Refactoring with Confidence

Types of Tests

- Unit - tests a unit of an application without its external dependencies
	- cheap to write
	- execute fast
	- no files, no database, no web services
	- don't give a lot of confidence of reliability of application

- Integration
	- tests the application with its external dependecies
	- with files, database, etc
	- take longer to execute (read/write to db)
	- give more confidence in health of application
	
- End-to-end
	- drives an application through its UI
	- selinium is a tool that does this
	- give you the greatest confidence
	- problem 1: very slow because you have ot launch application, login, submit form, see results
	- problem 2: very brittle

Test Pyramid
Should write all of them

Most tests should be unit tests (becvause easy to write)

Next should have some Integration tests (no ui)

Should write very few e2e test for only the key parts of UI, only happy path

Unit tests are great to write for quickly testing:
	- logic/calculations
	- conditional statements
	- loops
	- methods with complex logic or calculations
	- Calculate functions - can test all execution paths of method

Integration tests are better if application does a lot of just reading and writing from database

Takeaways
- Favour unit tests to e2e tests.
- Cover unit test gaps with integration tests.
- Use e2e tests sparingly. (only key functions of application)

Need a testing framework to write tests

NUnit - newest
MSTest - mS 
xUnit - gained more popularity

Give utility library to write test and test runner that runs the test.

Focus on the fundamentals not the tooling

Start with MSTest

Install NUnit later - longer history, more elegant

ReSharper - has faster and more powerful test runner - 

Rider - cross platform IDE - fast IDE and fast test runner

=============
Using NUnit in Visual Studio
=============

If not using resharper then in package manager console,
	install-package NUnit 
	install-package NUnit3TestAdapter

Resharper or Rider already have NUnit as default Test Runner

==============
What is Test-driven Development (TDD)
==============

Approach to build software, with TDD you write your tests before writing the production code

1. Write a failing test because you don't have any app code ot make it pass
2. Write the simplest code to make the test pass (don't over engineer)
3. Refactor if necessary

Benefits of TDD
- Testable Source Code
- Full Coverage by Tests - can refactor, deploy with confidence
- Simpler Implementation - if pass all test, no need to write more code, if need requirement start back at #1

Code First - start with application code then write test

Master fundamentals of testing then go into TDD

#2 - Fundamentals of Unit Testing

==================
Characteristics of Good Unit Tests
==================

- Good Unit Tests
	- First-class citizens (all best practices for writing code should be for test)
	- Each test should have own responsibility and less than 10 lines of code (clean and refactor as necessary)
	- clean, readable and maintainble
	- No logic, no if, else, foreach, loops, switch, etc
	- Isolated (test methods should not call each other or assume state)
	- Not too specific/general

==================
What to Test and What Not To Test
==================

Methods with more than 10 lines of code is test to code

Unit testing and clean code goes hand and hand

Test the outcome of a method

Query
	return some value (role)
	should write test and verify that the write value is being returned
		should test all execution path, each one has right value

Command
	role - performs action
	changing state in memory, database, web api, etc - making a change in system
	this may return a value
		should test the outcome of method, if state change, test that given object is in right state
		if result talk to external resource, make sure right calls to external dependencies

DONT TEST
	Language features 
		simple c# property bag - don't set, read and test that
	3rd-party code
		entity framework, don't write test around their method
		only test your code!

=============
Naming and Organising Test
=============

Test Projects (each project should have a unit test project)
	example: TestNinja / TestNinja.UnitTests (should be separate from integration tests)

Test Classes
	a test class for each production class in code
	example: Reservation / ReservationTests

Test Method
	a test method Number of Tests >= # of execution path
	name of test should clearly specify the business rule you're testing

Bad Tests
	Test1()
	SaveCustomerTest()
	GetMovie()

Good Test Methods Name

[MethodName]_[Scenario]_[ExpectedBehavior]

If method is too large, in order to not pollute the test class, extract test methods into separate class like
	Reservation_CanBeCancelledByTests

Write test like black box, what are different possibles? without looking at implementation

==============
Ignoring Tests
==============

Don't delete or comment out tests just to get to pass

===============
Writing Trustworthy Tests
===============

What is a trustworthy test?

One that can be relied upon.. if success good, if faile something is wrong with code

How?

#1 - Test-driven Development
	Write a failing test.
	Write the simplest code to make the test pass.

Untrustworthy - you are testing the wrong things - sometimes happen w/ code-first approach

Why to check if test is trustworthy or not
	in production code, create a bug on line that test should be testing
		if test still passes then it is not a trustworthy test (test has a bug)

code-first, test-later approach

- run tests if passes
- go production code, make change on line that makes test pass (make a bug)
- if you change the line, and the test still passes
- then test is not testing the right thing

Write trustworthy tests that bring value

be pragmatic - all apps should have a level of automated tests

Cost of a Software Bug

- $100 - Found in Requirements Gathering
- $1,500 - Found in QA Testing
- $10,000 - Found in Production

Unit Testing - The Sensitivity Problem - butunclebob.com

Focus on delivering quality software with less defects

FACT - Building software is costly, either upfront with writing unit tests, or later with massive bugs


